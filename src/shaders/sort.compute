#version 450 core
#define WORK_GROUP_SIZE 16
#define MAX_FRAGMENT_TILE 2048
#define FLOATING_PERCISION 1000

struct fragmentColorDepth {
	vec3 color;
	float depth;
};

struct fragmentMergingData {
	uint mergeID;
	uvec2 screenCoords;
};

struct sortedFragments {
	uint index;
	float depth;
};

layout(local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE) in;

layout(std430, binding = 5) buffer splattedColorDepthBuffer {
	vec4 tiledColorDepth[];
};

layout(std430, binding = 6) buffer splattedFragInfoBuffer {
	uvec4 tiledFragData[];
};

layout(std430, binding = 7) buffer tilingCounterBuffer {
	uint tilingCounter[];
};

layout(std430, binding = 8) buffer testBuffer {
	int test[];
};

layout(std430, binding = 9) buffer sortedFragColorDepthBuffer {
	vec4 sortedColorDepth[];
};

layout(std430, binding = 10) buffer sortedFragInfoBuffer {
	uvec4 sortedFragData[];
};

uniform vec2 cameraFarNear;
uniform vec3 eyeLens_focusDist_aperture;
uniform vec2 windowDimension;
uniform float tileSize;
uniform float coc_max;

shared sortedFragments localFragments[MAX_FRAGMENT_TILE];

float computeCoC(float depth) {
	float eyeLens = eyeLens_focusDist_aperture.x;
	float focusDist = eyeLens_focusDist_aperture.y;
	float aperture = eyeLens_focusDist_aperture.z;
	//float coc = aperture * abs(focusDist - depth) / depth;
	float focal = 1 / ((1 / eyeLens) + (1 / focusDist));
	float coc = (aperture * focal * abs(focusDist - (depth - eyeLens)))
		/ ((focusDist - focal) * (depth - eyeLens));
	return coc;
}

float precomputeBlurWeight(inout fragmentColorDepth frag, 
	inout fragmentMergingData fragInfo) {
	float depth = frag.depth;
	uvec2 coord = fragInfo.screenCoords;
	int w = int(fragInfo.mergeID);
	float coc = computeCoC(depth);
	coc = min(coc * 0.5f + 0.5f, coc_max);
	int merged = w * w;
	if (w > 1) {
		coc += (float(w) * 0.5 - 0.5) * 1.4143f;
	}
	float cocSq = coc * coc;
	float area = cocSq;
	float alpha = 1.0f / area;
	float weight = 1.0f;
	for (int i = 1; i < merged; i++) {
		float value = 1.0f;
		for (int j = 1; j <= i; j++) {
			value *= (1.0f - alpha);
		}
		weight += value;
	}
	weight *= alpha;
	weight = min(1.0f, weight);
	fragInfo.screenCoords = uvec2(
		(float(coord.x) + (float(w) - 1.0f) * 0.5f) * FLOATING_PERCISION,
		(float(coord.y) + (float(w) - 1.0f) * 0.5f) * FLOATING_PERCISION
	);
	fragInfo.mergeID = uint(weight * FLOATING_PERCISION); //preserving floating precision
	/*if (w > 1.0f) {
		cocSq = (coc + w / 4.0f) * (coc + w / 4.0f);
	}*/
	return cocSq * FLOATING_PERCISION;
}

void main() {
	ivec2 imgDim= ivec2(windowDimension.xy);
	ivec2 tiledImgDim= ivec2(ceil(imgDim / tileSize));
	ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
	if (gid.x >= imgDim.x || gid.y >= imgDim.y) return;
	ivec2 tid = ivec2(gl_LocalInvocationID.xy);
	int tid_1D = int(tid.y * tileSize + tid.x);
	ivec2 wid = ivec2(gl_WorkGroupID.xy);

	int tileSizeSq = int(tileSize * tileSize);
	int count = min(int(tilingCounter[wid.y * tiledImgDim.x + wid.x]), MAX_FRAGMENT_TILE);
	int writingIndexStart = wid.y * tiledImgDim.x * MAX_FRAGMENT_TILE
		+ wid.x * MAX_FRAGMENT_TILE;
	int fragTileDivision = count / tileSizeSq;
	int fragTileRemainder = count % tileSizeSq;

	int logN = int(ceil(log2(float(count))));
	int sortingAmount = 1 << logN;
	sortingAmount = max(sortingAmount, tileSizeSq);

	// load fragments
	for (int i = 0; i < fragTileDivision; i++) {
		sortedFragments sortedFrag;
		sortedFrag.index = i * tileSizeSq + tid_1D;
		sortedFrag.depth = tiledColorDepth[writingIndexStart + i * tileSizeSq
			+ tid_1D].a;
		localFragments[i * tileSizeSq + tid_1D] = sortedFrag;
	}

	for (int i = fragTileDivision; i < sortingAmount / tileSizeSq; i++) {
		sortedFragments sortedFrag;
		sortedFrag.index = 15000;
		sortedFrag.depth = 1e6;
		localFragments[i * tileSizeSq + tid_1D] = sortedFrag;
	}

	if (tid_1D < fragTileRemainder) {
		sortedFragments sortedFrag;
		sortedFrag.index = fragTileDivision * tileSizeSq + tid_1D;
		sortedFrag.depth = tiledColorDepth[writingIndexStart + fragTileDivision
			* tileSizeSq + tid_1D].a;
		localFragments[fragTileDivision * tileSizeSq + tid_1D] = sortedFrag;
	}
	barrier();

	//sort fragment
	int fragSortThread = int((sortingAmount / tileSizeSq));
	for (int i = 0; i < logN; i++) {
		for (int j = 0; j <= i; j++) {
			for (int k = 0; k < fragSortThread; k++) {
				int comparingOffset = 1;
				int index = k * tileSizeSq + tid_1D;
				comparingOffset <<= (i - j);
				int compareIndex = index | comparingOffset;
				bool ascending = ((index >> i) & 2) == 0;
				float depth = localFragments[index].depth;
				float comparingDepth = localFragments[compareIndex].depth;
				if (((depth > comparingDepth) && ascending) || 
					((depth < comparingDepth) && !ascending)) {
					sortedFragments temp;
					temp = localFragments[index];
					localFragments[index] = localFragments[compareIndex];
					localFragments[compareIndex] = temp;
				}
				barrier();
			}
		}
	}

	//write the sorted fragment to the main buffer
	for (int i = 0; i < fragTileDivision; i++) {
		uint writingIndex = i * tileSizeSq + tid_1D;
		uint readingIndex = localFragments[writingIndex].index;
		if (readingIndex != 15000) {
			fragmentColorDepth frag;
			frag.color = tiledColorDepth[writingIndexStart + readingIndex].rgb;
			frag.depth = tiledColorDepth[writingIndexStart + readingIndex].a;

			fragmentMergingData fragInfo;
			fragInfo.screenCoords = tiledFragData[writingIndexStart 
				+ readingIndex].xy;
			fragInfo.mergeID = tiledFragData[writingIndexStart
				+ readingIndex].z;
			float cocSq = precomputeBlurWeight(frag, fragInfo);
			sortedColorDepth[writingIndexStart + writingIndex] = 
				vec4(frag.color, frag.depth);
			sortedFragData[writingIndexStart + writingIndex] = 
				uvec4(fragInfo.screenCoords, fragInfo.mergeID, cocSq);
		}
	}
	if (tid_1D < fragTileRemainder) {
		uint writingIndex = fragTileDivision * tileSizeSq + tid_1D;
		uint readingIndex = localFragments[writingIndex].index;
		if (readingIndex != 15000) {
			fragmentColorDepth frag;
			frag.color = tiledColorDepth[writingIndexStart + readingIndex].rgb;
			frag.depth = tiledColorDepth[writingIndexStart + readingIndex].a;
			fragmentMergingData fragInfo;
			fragInfo.screenCoords = tiledFragData[writingIndexStart 
				+ readingIndex].xy;
			fragInfo.mergeID = tiledFragData[writingIndexStart
				+ readingIndex].z;
			float cocSq = precomputeBlurWeight(frag, fragInfo);
			sortedColorDepth[writingIndexStart + writingIndex] = 
				vec4(frag.color, frag.depth);
			sortedFragData[writingIndexStart + writingIndex] = 
				uvec4(fragInfo.screenCoords, fragInfo.mergeID, cocSq);
		}
	}
}