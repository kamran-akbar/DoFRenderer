#version 450 core
#define WORK_GROUP_SIZE 8
#define MAX_FRAGMENT_COUNT 16
#define MERGE_FACTOR 2
#define MAX_FRAGMENT_TILE 8192
#define TILE_SPREAD 2

struct fragmentColorDepth {
	vec3 color;
	float depth;
};

struct fragmentMergingData {
	uint mergeID;
	uvec2 screenCoords;
};

layout(local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE) in;

layout(binding = 2, r32i) restrict uniform iimage2D mergedFragCount;

layout(std430, binding = 3) buffer fragColorDepthBuffer {
	vec4 mergedColorDepth[];
};

layout(std430, binding = 4) buffer fragMergingDataBuffer {
	uvec4 mergedFragsInfo[];
};

layout(std430, binding = 5) buffer splattedColorDepthBuffer {
	vec4 tiledColorDepth[];
};

layout(std430, binding = 6) buffer splattedFragInfoBuffer {
	uvec4 tiledFragData[];
};

layout(std430, binding = 7) buffer tilingCounterBuffer {
	uint tilingCounter[];
};

layout(std430, binding = 8) buffer testBuffer {
	int test[];
};

uniform vec3 eyeLens_focusDist_aperture;
uniform vec2 tile_size_spread;
uniform float coc_max;

shared float localFragCount[WORK_GROUP_SIZE][WORK_GROUP_SIZE];

float computeCoC(float depth) {
	float eyeLens = eyeLens_focusDist_aperture.x;
	float focusDist = eyeLens_focusDist_aperture.y;
	float aperture = eyeLens_focusDist_aperture.z;
	//float coc = aperture * abs(focusDist - depth) / depth;
	float focal = 1 / ((1 / eyeLens) + (1 / focusDist));
	float coc = (aperture * focal * abs(focusDist - (depth - eyeLens)))
		/ ((focusDist - focal) * (depth - eyeLens));
	return coc;
}

void main() {
	int tileSize = int(tile_size_spread.x);
	int tileSpread = int(tile_size_spread.y);
	ivec2 dimension = imageSize(mergedFragCount).xy;
	ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
	if (gid.x >= dimension.x || gid.y >= dimension.y) return;
	ivec2 tid = ivec2(gl_LocalInvocationID.xy);
	localFragCount[tid.y][tid.x] = imageLoad(mergedFragCount, gid).r;
	for (int i = 0; i < localFragCount[tid.y][tid.x]; i++) {
		uint fragIndex = gid.y * dimension.x * MAX_FRAGMENT_COUNT 
						 + gid.x * MAX_FRAGMENT_COUNT + i;
		fragmentColorDepth colorDepthElement;
		colorDepthElement.color = mergedColorDepth[fragIndex].rgb;
		colorDepthElement.depth = mergedColorDepth[fragIndex].a;
		fragmentMergingData fragInfoElement;
		fragInfoElement.screenCoords = mergedFragsInfo[fragIndex].xy;
		fragInfoElement.mergeID = mergedFragsInfo[fragIndex].z;
		ivec2 coord = ivec2(fragInfoElement.screenCoords);
		int mergeID = int(fragInfoElement.mergeID);
		ivec2 tileID = ivec2(coord.xy / tileSize);
		int tileSizeFactor = tileSize / MERGE_FACTOR;
		int tiles_width = (dimension.x % tileSizeFactor == 0) ?
			dimension.x / tileSizeFactor : dimension.x / tileSizeFactor + 1;
		int tiles_height = (dimension.y % tileSizeFactor == 0) ?
			dimension.y / tileSizeFactor : dimension.y / tileSizeFactor + 1;
		int low_x = (tileID.x - tileSpread) < 0 ? -tileID.x : -tileSpread;
		int low_y = (tileID.y - tileSpread) < 0 ? -tileID.y : -tileSpread;
		int high_x = (tileID.x + tileSpread) >= tiles_width ? tiles_width - 1 
			- tileID.x : tileSpread;
		int high_y = (tileID.y + tileSpread) >= tiles_height ? tiles_height - 1
			- tileID.y : tileSpread;
		bool may[2 * TILE_SPREAD + 1][2 * TILE_SPREAD + 1];
		for (int j = 0; j < 2 * tileSpread + 1; j++) {
			for (int k = 0; k < 2 * tileSpread + 1; k++) {
				may[j][k] = false;
			}
		}
		may[tileSpread][tileSpread] = true;
		float coc = abs(computeCoC(colorDepthElement.depth)) * 2.0f;
		coc = min(coc * 0.5f + 0.5f, coc_max);
		vec2 fragCenter = vec2(coord.x + (mergeID - 1.0f) * 0.5f,
			coord.y + (mergeID - 1.0f) * 0.5f);
		for (int j = 0; j < tileSpread; j++) {
			int leftBorder = (tileID.x - tileSpread + 1 + j) * tileSize;
			int rightBorder = (tileID.x + 1 + j) * tileSize;
			int downBorder = (tileID.y + 1 + j) * tileSize;
			int topBorder = (tileID.y - tileSpread + 1 + j) * tileSize;
			float disToLeft = abs(leftBorder - fragCenter.x);
			float disToRight = abs(rightBorder - fragCenter.x);
			float disToTop = abs(topBorder - fragCenter.y);
			float disToDown = abs(downBorder - fragCenter.y);
			if (disToLeft < coc) may[tileSpread][j] = true;
			if (disToRight < coc) may[tileSpread][j + tileSpread + 1] = true;
			if (disToTop < coc) may[j][tileSpread] = true;
			if (disToDown < coc) may[j + tileSpread + 1][tileSpread] = true;
		}
		float cocSq = coc * coc;
		for (int j = 0; j < 2 * tileSize + 1; j++) {
			for (int k = 0; k < 2 * tileSize + 1; k++) {
				if (j == tileSpread || k == tileSpread) continue;
				int add_x = 0;
				int add_y = 0;
				if (k > tileSpread) add_x = -1;
				if (j > tileSpread) add_y = -1;
				uvec2 p = uvec2(tileID.x - tileSpread + 1 + add_x + k,
					tileID.y - tileSpread + 1 + add_y + j) * tileSize;
				vec2 dis = abs(p - fragCenter);
				if (dot(dis, dis) < cocSq) may[j][k] = true;
			}
		}
		for (int x = low_x; x <= high_x; x++) {
			for (int y = low_y; y <= high_y; y++) {
				if (may[y + tileSpread][x + tileSpread]) {
					ivec2 index = ivec2(tileID.x + x, tileID.y + y);
					uint posInTile = atomicAdd(
						tilingCounter[index.y * tiles_width + index.x], 1);
					uint writingIndex = index.y * tiles_width * MAX_FRAGMENT_TILE
						+ index.x * MAX_FRAGMENT_TILE + posInTile;
					tiledColorDepth[writingIndex] = vec4(colorDepthElement.color.xyz,
						colorDepthElement.depth);
					tiledFragData[writingIndex] = uvec4(fragInfoElement.screenCoords.xy,
						fragInfoElement.mergeID, 0.0f);
				}
			}
		}
	}
}